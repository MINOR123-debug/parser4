import json
import asyncio
from aiogram import Router, types
from aiogram.filters import CommandObject
from telethon import TelegramClient
from aiogram.filters import Command

import keyboards as kb

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telethon
API_ID = 20979523
API_HASH = "e8aa8ee24dbe98293f5bd124071d4f56"
PHONE_NUMBER = "+380631776515"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telethon –∫–ª—ñ—î–Ω—Ç–∞
client = TelegramClient("search_session", API_ID, API_HASH)


parser_router = Router()


user_parsing_state = {}


try:
    with open("pay.json", "r", encoding="utf-8") as f:
        allowed_users = json.load(f)
except FileNotFoundError:
    allowed_users = []

ADMIN_IDS = [1332517469, 6395768505]

def save_allowed_users():
    with open("pay.json", "w", encoding="utf-8") as f:
        json.dump(allowed_users, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telethon
async def setup_telethon():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Telethon –∫–ª—ñ—î–Ω—Ç–∞.
    """
    if not client.is_connected():
        await client.start(PHONE_NUMBER)
        print("Telethon —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ!")

@parser_router.message(Command("add"))
async def add_user(message: types.Message, command: CommandObject):
    """
    –î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —ñ–∑ –∑–∞–ø–∏—Å–æ–º –¥–æ —Ñ–∞–π–ª—É pay.json. –î–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = int(command.args.strip()) if command.args else None
    if not user_id:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add ID")
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö —ñ–∑ pay.json
    try:
        with open("pay.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        allowed_users = data.get("users", [])  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    except FileNotFoundError:
        allowed_users = []
    except json.JSONDecodeError:
        allowed_users = []

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø
    if any(user["id"] == user_id for user in allowed_users):
        await message.answer("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø.")
        return

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    new_user = {
        "id": user_id,
        "username": message.from_user.username or "–ù–µ–º–∞—î",
        "status": "–∞–∫—Ç–∏–≤–Ω–∏–π"
    }
    allowed_users.append(new_user)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —É —Ñ–∞–π–ª pay.json
    data["users"] = allowed_users  # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –¥–∞–Ω–∏—Ö
    with open("pay.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —â–æ –¥–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–≤–∫–∞–∑—É—î–º–æ –Ω—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    await message.answer(f"(–ê–î–ú–Ü–ù–û–ú: @{new_user['username']}) –Ω–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID {user_id} –¥–æ –ø–ª–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü—ñ–π")

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"–í–∞–º –Ω–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π /parser –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{message.from_user.username}. \n"
                 "–¢–µ–ø–µ—Ä –≤–∏ –º–∞—î—Ç–µ –ø–ª–∞—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è üòä\n\n"
        )
    except Exception as e:
        await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")



@parser_router.message(Command("addoff"))
async def remove_user(message: types.Message, command: CommandObject):
    """
    –í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ñ–∞–π–ª—É pay.json. –î–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    user_id = int(command.args.strip()) if command.args else None
    if not user_id:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /addoff ID")
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö —ñ–∑ pay.json
    try:
        with open("pay.json", "r", encoding="utf-8") as f:
            allowed_users = json.load(f).get("users", [])  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    except FileNotFoundError:
        allowed_users = []
    except json.JSONDecodeError:
        allowed_users = []

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ —Å–ø–∏—Å–∫—É
    user = next((user for user in allowed_users if user["id"] == user_id), None)
    if not user:
        await message.answer("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É
    allowed_users = [user for user in allowed_users if user["id"] != user_id]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª
    try:
        with open("pay.json", "w", encoding="utf-8") as f:
            json.dump({"users": allowed_users}, f, ensure_ascii=False, indent=4)
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ñ–∞–π–ª—É pay.json.")
    except Exception as e:
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"–í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.full_name}. \n"
                 "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞. ‚úÖ"
        )
    except Exception as e:
        await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")











from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup


@parser_router.callback_query(lambda c: c.data == "parser")
async def handle_parser_button(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑ callback_data "parser".
    """
    user_id = callback.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
    if user_id not in ADMINS:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü—Ä–æ—Å–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    await callback.message.answer("üì• –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª (–º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 'https://').")
    user_parsing_state[user_id] = {'awaiting_link': True}  # –°—Ç–∞–≤–∏–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è


@parser_router.message(lambda message: message.text and message.text.startswith("https://") and not message.photo and not message.video)
async def handle_channel_link(message: types.Message):
    """
    –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∫–∞–Ω–∞–ª.
    """
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–æ—Ç –æ—á—ñ–∫—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if not user_parsing_state.get(user_id, {}).get('awaiting_link'):
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    channel_url = message.text.strip()
    if not channel_url.startswith("https://") or "t.me/" not in channel_url:
        await message.answer("‚ùå –¶–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 'https://').")
        return

    # –Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–µ, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    user_parsing_state[user_id]['awaiting_link'] = False

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–∞—Ä—Å–∏–Ω–≥—É
    await cmd_parser(message, CommandObject(args=channel_url))


async def cmd_parser(message: types.Message, command: CommandObject):
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É.
    """
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
    if user_id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
    channel_url = command.args.strip() if command.args else None
    if not channel_url:
        await message.answer("‚ùå –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /parser https://t.me/–Ω–∞–∑–≤–∞_–∫–∞–Ω–∞–ª—É")
        return

    if not channel_url.startswith("https://") or "t.me/" not in channel_url:
        await message.answer("‚ùå –¶–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –£–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É "–ø–∞—Ä—Å–∏–Ω–≥"
    user_parsing_state[user_id] = {'parsing': True}

    try:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π
        if not client.is_connected():
            await setup_telethon()

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª
        channel = await client.get_entity(channel_url)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
        subscribers = []
        total_fetched = 0

        # –ü–∞—Ä—Å–∏–º–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —ñ–∑ –ø–∞—É–∑–∞–º–∏
        async for user in client.iter_participants(channel):
            subscribers.append({
                "id": user.id,
                "username": user.username,
                "name": f"{user.first_name} {user.last_name}" if user.first_name else ""
            })
            total_fetched += 1

            if total_fetched % 2000 == 0:
                await message.answer(f"–°–ø–∞—Ä—à–µ–Ω–æ {total_fetched} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤. –ü—Ä–æ—Ü–µ—Å —Ç—Ä–∏–≤–∞—î, –æ—á—ñ–∫—É–π—Ç–µ ‚è≥.")
                await asyncio.sleep(5)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —É JSON —Ñ–∞–π–ª
        with open("subscribers.json", "w", encoding="utf-8") as f:
            json.dump(subscribers, f, ensure_ascii=False, indent=4)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(f"‚úÖ –°–ø–∞—Ä—à–µ–Ω–æ {total_fetched} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤! –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–±–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –π–æ–≥–æ.", reply_markup=kb.open1)

    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
    finally:
        user_parsing_state[user_id] = {'parsing': False}
        await message.answer("‚úîÔ∏è –ü—Ä–æ—Ü–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø—É—Å–∫–æ–º –æ—á–∏—Å—Ç—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /clear.")





































from aiogram.types import CallbackQuery, Message

SUBSCRIBERS_FILE = "subscribers.json"

def read_subscribers():
    """
    –ó—á–∏—Ç—É—î —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É.
    """
    try:
        with open(SUBSCRIBERS_FILE, "r", encoding="utf-8") as file:
            subscribers = json.load(file)
            return subscribers if isinstance(subscribers, list) else []
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
ADMINS = [1332517469, 7689890294]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤

def clear_subscribers():
    """
    –û—á–∏—â–∞—î —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —É —Ñ–∞–π–ª—ñ.
    """
    with open(SUBSCRIBERS_FILE, "w", encoding="utf-8") as file:
        json.dump([], file)


@parser_router.callback_query(lambda c: c.data == "sp")
async def handle_view_subscribers(callback: CallbackQuery):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É.
    """
    user_id = callback.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó. ‚ùå")
        return

    # –ß–∏—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É
    try:
        with open("subscribers.json", "r", encoding="utf-8") as file:
            subscribers = json.load(file)
            if not isinstance(subscribers, list):
                await callback.message.answer("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –û—á—ñ–∫—É—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫.")
                return
    except FileNotFoundError:
        await callback.message.answer("‚ùå –§–∞–π–ª —ñ–∑ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    except json.JSONDecodeError:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º–∏.")
        return

    # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π
    if not subscribers:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # –õ—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ Telegram
    char_limit = 4000
    current_message = ""

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(subscribers)} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.")

    for subscriber in subscribers:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID, username —Ç–∞ name
        user_id = subscriber.get("id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID")
        username = subscriber.get("username", "–ë–µ–∑ username")
        name = subscriber.get("name", "–ë–µ–∑ —ñ–º–µ–Ω—ñ")

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è
        formatted_message = f"ID: {user_id}\n@{username}\n{name}\n\n"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É —Å–∏–º–≤–æ–ª—ñ–≤ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
        if len(current_message) + len(formatted_message) <= char_limit:
            current_message += formatted_message
        else:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —á–∞—Å—Ç–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç
            await callback.message.answer(current_message)
            current_message = formatted_message

            await asyncio.sleep(1)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ª–∏—à–æ–∫, —è–∫—â–æ –≤—ñ–Ω —î
    if current_message:
        await callback.message.answer(current_message)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    await callback.message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –≤–∏–¥–∞–Ω–∏–π." , reply_markup=kb.bay)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è callback_data
@parser_router.callback_query(lambda c: c.data == "op")
async def handle_clear_subscribers(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
    if user_id not in ADMINS:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó. ‚ùå")
        return

    # –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
    clear_subscribers()

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
    await callback.message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –æ—á–∏—â–µ–Ω–æ! –º–æ–∂–µ—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç–∏ —â–µ —Ä–∞–∑‚úÖ" , reply_markup=kb.bay1)


#—Ñ–∞–π–ª 

from aiogram.types.input_file import InputFile
from aiogram.types.input_file import FSInputFile
import json
import os


EXPORT_FILE = "exported_subscribers.txt"  # –§–∞–π–ª –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
def read_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, "r", encoding="utf-8") as file:
            return json.load(file) if isinstance(json.load(file), list) else []
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º–∏
def create_export_file():
    subscribers = read_subscribers()
    with open(EXPORT_FILE, "w", encoding="utf-8") as file:
        for subscriber in subscribers:
            # –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª
            user_id = subscriber.get("id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID")
            username = subscriber.get("username", "–ë–µ–∑ username")
            name = subscriber.get("name", "–ë–µ–∑ —ñ–º–µ–Ω—ñ")
            file.write(f"ID: {user_id}\n–Ü–º'—è: {name}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n\n")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è callback_data 'fp'
@parser_router.callback_query(lambda c: c.data == "fp")
async def handle_export_subscribers(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
    if user_id not in ADMINS:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó. ‚ùå")
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
    create_export_file()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    if os.path.exists(EXPORT_FILE) and os.path.getsize(EXPORT_FILE) > 0:
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        file_to_send = FSInputFile(EXPORT_FILE)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FSInputFile –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Ñ–∞–π–ª—É
        await callback.message.answer_document(file_to_send, caption="üìÇ –û—Å—å —Ñ–∞–π–ª –∑ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º–∏.")
    else:
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")